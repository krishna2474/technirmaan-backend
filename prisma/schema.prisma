// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id      String      @id @default(uuid())
  name         String
  email        String      @unique
  phone        String
  class        String
  department   String
  college      String
  otp          String?
  otpExpiresAt DateTime?
  registrations Registration[] // Relation to event registration
  teamMembers   TeamMember[]   // Relation to team membership
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
}

model Event {
  event_id      String         @id @default(uuid())
  name          String
  description   String
  registrations Registration[] // Link to registrations
  teams         Team[]         // Relation to teams
  price         String         @default("50") // Default price set to "50"
  maxPlayers    Int            @default(1)    // Default maxPlayers set to 1
  minPlayers    Int            @default(1)    // Default minPlayers set to 1
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Registration {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [event_id], onDelete: Cascade)

  @@unique([userId, eventId]) // Ensure one user can't register multiple times for the same event
}

model Team {
  id          String         @id @default(uuid())
  eventId     String         // Foreign key to Event
  members     TeamMember[]   // Relation to team members
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  event       Event          @relation(fields: [eventId], references: [event_id], onDelete: Cascade)
}

model TeamMember {
  id          String   @id @default(uuid())
  userId      String   // Foreign key to User
  teamId      String   // Foreign key to Team
  joinedAt    DateTime @default(now())

  user        User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId]) // Ensure a user can only join a team once
}